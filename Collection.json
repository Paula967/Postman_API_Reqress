{
	"info": {
		"_postman_id": "c9817908-e482-482a-a48f-2750673df84c",
		"name": "Reqres",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "38468433"
	},
	"item": [
		{
			"name": "Register - Successful",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var JsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Response time is less than 3000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
							"});\r",
							"\r",
							"pm.environment.set(\"Register_Token\", JsonData.token);\r",
							"pm.environment.set(\"Register_Id\", JsonData.id);\r",
							"pm.test(\"Test The Token Of Register_User\", function () {\r",
							"    pm.expect(JsonData.token).to.eql(pm.environment.get(\"Register_Token\"));\r",
							"});\r",
							"pm.test(\"Test The ID Of Register_User\", function () {\r",
							"    pm.expect(JsonData.id).to.eql(pm.environment.get(\"Register_Id\"));\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"eve.holt@reqres.in\",\r\n    \"password\": \"pistol\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{Base_URL}}/api/register",
					"host": [
						"{{Base_URL}}"
					],
					"path": [
						"api",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login - Successful",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 3000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
							"});\r",
							"var JsonData=pm.response.json();\r",
							"pm.environment.set(\"Login_Token\", JsonData.token);\r",
							"pm.test(\"Test The Token Of Login_User\", function () {\r",
							"    pm.expect(JsonData.token).to.eql(pm.environment.get(\"Login_Token\"));\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"eve.holt@reqres.in\",\r\n    \"password\": \"cityslicka\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{Base_URL}}/api/login",
					"host": [
						"{{Base_URL}}"
					],
					"path": [
						"api",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 3000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
							"});\r",
							"\r",
							" var jsonData = pm.response.json();\r",
							"pm.environment.set(\"User_name\", jsonData.name);\r",
							"pm.environment.set(\"User_Job\",jsonData.job);\r",
							"\r",
							"pm.test(\"Your test User Name\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(pm.environment.get(\"User_name\"));\r",
							"});\r",
							"pm.test(\"Your test User Job\", function () {\r",
							"    pm.expect(jsonData.job).to.eql(pm.environment.get(\"User_Job\"));\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "\r\n{\r\n    \"name\": \"morpheus\",\r\n    \"job\": \"leader\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{Base_URL}}/api/users",
					"host": [
						"{{Base_URL}}"
					],
					"path": [
						"api",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Single User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Pass the Json Value to The Environments variable\r",
							"var JsonData=pm.response.json();\r",
							"pm.environment.set(\"User_Mail\", JsonData.data.email);\r",
							"pm.environment.set(\"User_first_name\",JsonData.data.first_name);\r",
							"pm.environment.set(\"User_last_name\", JsonData.data.last_name);\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 3000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
							"});\r",
							"\r",
							"pm.test(\"Test The ID Of Specific User\", function () {\r",
							"    pm.expect(JsonData.data.id).to.eql(2);\r",
							"});\r",
							"pm.test(\"Test The E-mail Address of this\", function () {\r",
							"     pm.expect(JsonData.data.email).to.eql(pm.environment.get(\"User_Mail\"));\r",
							"});\r",
							"pm.test(\"Test The id\", function () {\r",
							"    pm.expect(JsonData.data.first_name).to.eql(pm.environment.get(\"User_first_name\"));\r",
							"});\r",
							"pm.test(\"Test The id\", function () {\r",
							"    pm.expect(JsonData.data.last_name).to.eql(pm.environment.get(\"User_last_name\"));\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{Base_URL}}/api/users/2",
					"host": [
						"{{Base_URL}}"
					],
					"path": [
						"api",
						"users",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "Single User Not Found",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404 \", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 3000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{Base_URL}}/api/users/23",
					"host": [
						"{{Base_URL}}"
					],
					"path": [
						"api",
						"users",
						"23"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 3000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
							"});\r",
							"\r",
							"pm.test(\"Correct Data\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.name).to.eql(\"morpheus\");\r",
							"    pm.expect(jsonData.job).to.eql(\"zion resident\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"morpheus\",\r\n    \"job\": \"zion resident\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{Base_URL}}/api/users/2",
					"host": [
						"{{Base_URL}}"
					],
					"path": [
						"api",
						"users",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Response time is less than 3000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
							"});\r",
							"pm.test(\"Correct Name\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.name).to.eql(\"morpheus\");\r",
							"});\r",
							"pm.test(\"Correct Job\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.job).to.eql(\"zion resident\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"morpheus\",\r\n    \"job\": \"zion resident\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{Base_URL}}/api/users/2",
					"host": [
						"{{Base_URL}}"
					],
					"path": [
						"api",
						"users",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 3000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{Base_URL}}/api/users/2",
					"host": [
						"{{Base_URL}}"
					],
					"path": [
						"api",
						"users",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "List All Users",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Response code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 3000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
							"});\r",
							"\r",
							"pm.test(\"Correct Page Number\", function () {\r",
							"    pm.expect(jsonData.page).to.eql(2);\r",
							"});\r",
							"pm.test(\"Correct Num_Of_Users_Per_Page\", function () {\r",
							"    pm.expect(jsonData.per_page).to.eql(6);\r",
							"});\r",
							"pm.test(\"Correct Total_Users\", function () {\r",
							"   pm.expect(jsonData.total).to.eql(12);\r",
							"});\r",
							"pm.test(\"Correct Total_Pages\", function () {\r",
							"   pm.expect(jsonData.total_pages).to.eql(2); \r",
							"});\r",
							"\r",
							"    \r",
							"    \r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{Base_URL}}/api/users?page=2",
					"host": [
						"{{Base_URL}}"
					],
					"path": [
						"api",
						"users"
					],
					"query": [
						{
							"key": "page",
							"value": "2"
						}
					]
				}
			},
			"response": [
				{
					"name": "List All Users",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{Base_URL}}/api/users?page=2",
							"host": [
								"{{Base_URL}}"
							],
							"path": [
								"api",
								"users"
							],
							"query": [
								{
									"key": "page",
									"value": "2"
								}
							]
						}
					},
					"_postman_previewlanguage": null,
					"header": null,
					"cookie": [],
					"body": null
				}
			]
		},
		{
			"name": "Single<Resource>",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							" var jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 3000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
							"});\r",
							"\r",
							"pm.test(\"Check Single<Resource> ID\", function () {\r",
							"     pm.expect(jsonData.data.id).to.eql(2);\r",
							"});\r",
							"pm.test(\"Check Single<Resource> Name\", function () {\r",
							"    pm.expect(jsonData.data.name).to.eql(\"fuchsia rose\");\r",
							"});\r",
							"pm.test(\"Check Single<Resource> Year\", function () {\r",
							"    pm.expect(jsonData.data.year).to.eql(2001);\r",
							"});\r",
							"pm.test(\"Check Single<Resource> Color\", function () {\r",
							"    pm.expect(jsonData.data.color).to.eql(\"#C74375\");\r",
							"});\r",
							"pm.test(\"Check Single<Resource> Pantone Value\", function () {\r",
							"    pm.expect(jsonData.data.pantone_value).to.eql(\"17-2031\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{Base_URL}}/api/unknown/2",
					"host": [
						"{{Base_URL}}"
					],
					"path": [
						"api",
						"unknown",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "Single<Resource>Not Found",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 3000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{Base_URL}}/api/unknown/23",
					"host": [
						"{{Base_URL}}"
					],
					"path": [
						"api",
						"unknown",
						"23"
					]
				}
			},
			"response": []
		},
		{
			"name": "List<Resources>",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 3000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
							"});\r",
							"\r",
							"pm.test(\"List<Resources>\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    \r",
							"    pm.expect(jsonData.page).to.eql(1);\r",
							"    pm.expect(jsonData.per_page).to.eql(6);\r",
							"    pm.expect(jsonData.total).to.eql(12);\r",
							"    pm.expect(jsonData.total_pages).to.eql(2);\r",
							"    pm.expect(jsonData.data[0].id).to.eql(1);\r",
							"    pm.expect(jsonData.data[0].name).to.eql(\"cerulean\");\r",
							"    pm.expect(jsonData.data[0].year).to.eql(2000);\r",
							"    pm.expect(jsonData.data[0].color).to.eql(\"#98B2D1\");\r",
							"    pm.expect(jsonData.data[0].pantone_value).to.eql(\"15-4020\");\r",
							"\r",
							"    pm.expect(jsonData.data[1].id).to.eql(2);\r",
							"    pm.expect(jsonData.data[1].name).to.eql(\"fuchsia rose\");\r",
							"    pm.expect(jsonData.data[1].year).to.eql(2001);\r",
							"    pm.expect(jsonData.data[1].color).to.eql(\"#C74375\");\r",
							"    pm.expect(jsonData.data[1].pantone_value).to.eql(\"17-2031\");\r",
							"\r",
							"    pm.expect(jsonData.data[2].id).to.eql(3);\r",
							"    pm.expect(jsonData.data[2].name).to.eql(\"true red\");\r",
							"    pm.expect(jsonData.data[2].year).to.eql(2002);\r",
							"    pm.expect(jsonData.data[2].color).to.eql(\"#BF1932\");\r",
							"    pm.expect(jsonData.data[2].pantone_value).to.eql(\"19-1664\");\r",
							"\r",
							"    pm.expect(jsonData.data[3].id).to.eql(4);\r",
							"    pm.expect(jsonData.data[3].name).to.eql(\"aqua sky\");\r",
							"    pm.expect(jsonData.data[3].year).to.eql(2003);\r",
							"    pm.expect(jsonData.data[3].color).to.eql(\"#7BC4C4\");\r",
							"    pm.expect(jsonData.data[3].pantone_value).to.eql(\"14-4811\");\r",
							"\r",
							"    pm.expect(jsonData.data[4].id).to.eql(5);\r",
							"    pm.expect(jsonData.data[4].name).to.eql(\"tigerlily\");\r",
							"    pm.expect(jsonData.data[4].year).to.eql(2004);\r",
							"    pm.expect(jsonData.data[4].color).to.eql(\"#E2583E\");\r",
							"    pm.expect(jsonData.data[4].pantone_value).to.eql(\"17-1456\");  \r",
							"\r",
							"    pm.expect(jsonData.data[5].id).to.eql(6);\r",
							"    pm.expect(jsonData.data[5].name).to.eql(\"blue turquoise\");\r",
							"    pm.expect(jsonData.data[5].year).to.eql(2005);\r",
							"    pm.expect(jsonData.data[5].color).to.eql(\"#53B0AE\");\r",
							"    pm.expect(jsonData.data[5].pantone_value).to.eql(\"15-5217\");  \r",
							"});\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{Base_URL}}/api/unknown",
					"host": [
						"{{Base_URL}}"
					],
					"path": [
						"api",
						"unknown"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delayed Response",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is at least 3000 ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.at.least(3000);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{Base_URL}}/api/users?delay=3",
					"host": [
						"{{Base_URL}}"
					],
					"path": [
						"api",
						"users"
					],
					"query": [
						{
							"key": "delay",
							"value": "3"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Register - Unsuccessful",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"pm.test(\"Response time is less than 3000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "\r\n   { \"email\": \"sydney@fife\" }\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{Base_URL}}/api/register",
					"host": [
						"{{Base_URL}}"
					],
					"path": [
						"api",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login - unsuccessful",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"pm.test(\"Response time is less than 3000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"peter@klaven\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{Base_URL}}/api/login",
					"host": [
						"{{Base_URL}}"
					],
					"path": [
						"api",
						"login"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	]
}